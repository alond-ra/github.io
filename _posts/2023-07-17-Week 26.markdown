---
layout: post
title:  "Weekly essay #26"
date:   2023-07-17 08:32:00 -0600
author: "Alondra Galvan"
categories: weekly-essay
---


So... Week 26. This week we had two more interviews for the interviewmania module second round; this round consisted on task interviews unlike the first round which consisted of Q&A about algorithms, data structures, software engineering, programming paradigm, design patterns, agile, testing and specifics of a programming language. I had this interview in the past week, I was the interviewer and prepared two tasks for my interviewee to solve. For those two interviews that I mentioned for this week, I was a spectator. It was interesting and hearing the feedback my batchmates got was useful. From what I took note on feedback that others received, the most important points I can mention are these: Ask lots of stuff before coding, write pseudocode before coding because some interviews won’t even let you touch a coding editor and read Cracking the Coding Interview by Gayle Laakmann McDowell. 

We were assigned to read some material, watch some videos and solve coding problems in order to keep improving our performance during interviews. 
* About the [HackerRank Interview Preparation Kit](https://www.hackerrank.com/interview/interview-preparation-kit): It is a 69 problem set on a variety of topics such as arrays, dictionaries and hashmaps, sorting, string manipulation, greedy algorithms, dynamic programming, stacks and queues, graphs, trees, linked lists, recursion and a few others. I completed about 17 problems (from the warmup problems, arrays, sorting, string manipulation and search topics). I'll focus on these problems next week.
* I saw the [How to: Work at Google — Example Coding/Engineering Interview](https://www.youtube.com/watch?v=XKu_SEDAykw&t=2s) video. It goes straight to the point to show a whiteboard interview where a software engineer asks another software engineer to solve a given problem on the whiteboard. This kind of interview seems a bit intimidating to me but looking at the example will give me calm if I ever have an interview like this one. The most remarkable part of this video was at the end when the interviewer gives a recap of the interview and mentions aspects that the interviewees should consider: 
1. Think out loud about the solution to let everyone know your approach to the solution.
2. Test your ideas to check that they actually work.
3. Write ideas and/ or pseudocode before writing code.
4. Ask for clarifications if needed.
* I read the [Why software fails](https://spectrum.ieee.org/why-software-fails) article. It was written by Robert N. Charette on September 1st, 2005. It's been almost 20 years since the article was written. However, it covers relevant aspects (relevant even today) even though the software development environment (the context of the article I'd say) has changed, adapted and grown over time. I'd like to mention this quote from the article: 
> "If the software coders don't catch their omission until final system testing—or worse, until after the system has been rolled out—the costs incurred to correct the error will likely be many times greater than if they'd caught the mistake while they were still working on the initial sales process."

I think it catches part of the article's essence or at least it caught my attention the most. Whatever is the "omission" or error is (whether is unrealistic goals, unmanaged risks, poor communication, inability to handle the project's complexity, poor project management or any of the listed or not listed reasons in the article), it is important to identify the possible-failure-reason on an early stage of the project development. The higher the development reaches, if there is a failure, the fall will be worse and eventually, most likely to be inevitable. You don’t need to be a project manager to feel the need of knowing these risks. The whole team (talking about a software development team) should be able to recognize the risks so they are most likely to prevent failure.
