---
layout: post
title:  "Weekly essay #26"
date:   2023-07-17 08:32:00 -0600
author: "Alondra Galvan"
categories: weekly-essay
---


So... Week 26. This week we had two more interviews for the interviewmania module second round; this round consisted on task interviews unlike the first round which consisted of Q&A about algorithms, data structures, software engineering, programming paradigm, design patterns, agile, testing and specifics of a programming language. I had this interview in the past week, I was the interviewer and prepared two tasks for my interviewee to solve. For those two interviews that I mentioned for this week, I was a spectator. It was interesting and hearing the feedback my batchmates got was useful. From what I took note on feedback that others received, the most important points I can mention are these: Ask lots of stuff before coding, write pseudocode before coding because some interviews won’t even let you touch a coding editor and read Cracking the Coding Interview by Gayle Laakmann McDowell. 

We were assigned to read some material, watch some videos and solve coding problems in order to keep improving our performance during interviews. 
* About the [HackerRank Interview Preparation Kit](https://www.hackerrank.com/interview/interview-preparation-kit): It is a 69 problem set on a variety of topics such as arrays, dictionaries and hashmaps, sorting, string manipulation, greedy algorithms, dynamic programming, stacks and queues, graphs, trees, linked lists, recursion and a few others. I completed about 17 problems (from the warmup problems, arrays, sorting, string manipulation and search topics). I'll focus on these problems next week.
* I saw the [How to: Work at Google — Example Coding/Engineering Interview](https://www.youtube.com/watch?v=XKu_SEDAykw&t=2s) video. It goes straight to the point to show a whiteboard interview where a software engineer asks another software engineer to solve a given problem on the whiteboard. This kind of interview seems a bit intimidating to me but looking at the example will give me calm if I ever have an interview like this one. The most remarkable part of this video was at the end when the interviewer gives a recap of the interview and mentions aspects that the interviewees should consider: 
1. Think out loud about the solution to let everyone know your approach to the solution.
2. Test your ideas to check that they actually work.
3. Write ideas and/ or pseudocode before writing code.
4. Ask for clarifications if needed.
* I read the [Why software fails](https://spectrum.ieee.org/why-software-fails) article. It was written by Robert N. Charette on September 1st, 2005. It's been almost 20 years since the article was written. However, it covers relevant aspects (relevant even today) even though the software development environment (the context of the article I'd say) has changed, adapted and grown over time. I'd like to mention this quote from the article: 
> "If the software coders don't catch their omission until final system testing—or worse, until after the system has been rolled out—the costs incurred to correct the error will likely be many times greater than if they'd caught the mistake while they were still working on the initial sales process."
I think it catches part of the article's essence or at least it caught my attention the most. Whatever is the "omission" or error is (whether is unrealistic goals, unmanaged risks, poor communication, inability to handle the project's complexity, poor project management or any of the listed or not listed reasons in the article), it is important to identify the possible-failure-reason on an early stage of the project development. The higher the development reaches, if there is a failure, the fall will be worse and eventually, most likely to be inevitable. You don’t need to be a project manager to feel the need of knowing these risks. The whole team (talking about a software development team) should be able to recognize the risks so they are most likely to prevent failure.

* I read the article [Lessons from a decade of IT failure](https://spectrum.ieee.org/lessons-from-a-decade-of-it-failures) by Robert N. Charette and Joshua J. Romero and posted on October 16, 2015. This one came 10 years after [Why software fails](https://spectrum.ieee.org/why-software-fails) was posted. It talks about a retrospective of software projects that have failed since then (2005 to 2015). Through examples of failed projects, it talks about decisive factors that decide the success or failure of a project. I could say that the conclusion of this article or maybe one of the goals of the authors could be providing the reader with some ways to prevent the project's failure such as setting clear goals and expectations, communicating effectively, managing risk, and building a strong risk management culture. I think this article would be a valuable resource for anyone who is involved in IT project management as well as any member of an IT project team. 

* I also read the [The Long, Dismal History of Software Project Failure](https://blog.codinghorror.com/the-long-dismal-history-of-software-project-failure/) article, posted by Jeff Atwood on May 15, 2006. It is about a historical overview of software project failures. It discusses the history of software project failures. It cites some examples of failed software projects, such as the Westpac Banking Corporation's IT project (which cancellation caused the elimination of 500 jobs). It says that software project failures can have a significant financial and reputational impact on organizations. However, it concludes that failures are fine and mentions the importance of them and especially, the importance of learning from failure and that "requires concerted postmortem introspection and analysis"; just like the plane-crashing analysis example from [Why software fails](https://spectrum.ieee.org/why-software-fails) to identify what went wrong and prevent it in future projects. 

* Another article I read was [The Essential Guide to Recovering from Failure](https://www.psychologytoday.com/intl/blog/the-squeaky-wheel/201307/the-essential-guide-recovering-failure) posted by Ph.D. Guy Winch on July 16, 2013. Failing feels bad. I know it. But life goes on and, somehow, we need to keep going. This article talks about that and emphasizes on learning from failures and looking for success in the future. It mentions the "wounds Failure Inflicts": failure makes our goals seem tougher, makes our abilities seem weaker, damages our motivation, makes us risk-averse, limits our ability to think outside the box, makes us feel helpless and leads us to make incorrect and damaging generalizations. But, of course, we cannot just stay stuck in the middle because we failed, we have to move on. Easy to say, harder to actually act upon it, right? The article discusses the different ways to recover from failure. The first step is to accept that failure has happened and to let go of any anger or resentment. The author discusses the importance of setting realistic goals and taking small steps towards recovery for treating the failure wounds by fighting the distortions, reviving your self-worth, reminding yourself of what success would mean to you, taking calculated risks, focusing on factors in your control and reframing the failure as a single incident. I do value psychologists' work a lot, but this article reminded it to me. Even though I have experienced failing and moving on, I couldn’t give advice as well expressed as the author does in the article!

* Cracking the Coding Interview... What a book. This is a book written by Gayle Laakmann McDowell. It is a book that helps software engineers prepare for technical interviews. This week I read chapters 1 to 4 which titles are: 1. Arrays and Strings, 2. Linked Lists, 3. Stacks and Queues, 4. Trees and graphs. 

I read some of the articles before (on past Apprentice modules when they were assigned). Still relevant of course. 

Besides that, I attended another agile workshop, this time about Agile inception. This workshop covered agile thinking, considerations and steps for a successful agile inception. Interesting and informative as always.

Kinda felt like a long week, but still have things to go for the next one! 
