---
layout: post
title:  "Weekly essay #25"
date:   2023-07-10 08:32:00 -0600
author: "Alondra Galvan"
categories: weekly-essay
---


For this week I focused on both interviews for the Interviewmania module. As a recap, there were two rounds for this module: the first one consisted of questions about algorithms, data structures, software engineer, programming paradigm, design patterns, agile, testing and specifics of the programming language of the interviewee's preference; the second round it was a task interview. In the first round, I was the interviewee and Aileen Palafox, an Encora employee and former apprentice was the interviewer, and in the second round we switched roles. 
Since the first interview was on Monday, I prepared for it the previous week by studying an overview of the included topics. As I mentioned in the weekly essay for the last week "Most of the topics are broad topics. Due to time, I did not delve into them but tried to understand and be able to explain general ideas and concepts" and that "I understand the concepts, I know how to apply them and I can provide examples. But sometimes I am unable to give a formal definition of them which could be a problem in the interview". And... This last thing was what happened. I struggled to give some formal definitions. People in the interview (interviewer, auditors and spectators) gave me feedback on saying when I do not know an answer, study more in deep some concepts (most of them being part of the software engineering topic) and provide more technical examples rather than real life examples (as a comparison to explain tech concepts). 

I'll work on that. I’m especially confused about how to find the balance between saying "I do not know" and explaining what I know even though knowing it will not be the whole answer. I enrolled in a Software engineering course by IBM at Coursera to formalize and expand my knowledge on this subject. I'm going easy on this course and I just saw a few videos about the software development life cycle. This topic is not new to me, I'll just remark the most important concepts from this material: the software development life cycle (SDLC) is the process to develop high quality software aiming to minimize risks and costs; a cycle of planning, design and development; the phases are: review requirements and analysis, design, implementation (of code), test, deploy and maintenance. This was a question of the interview and now I recognize that my answer wasn’t wrong but it could have been more concise. This course is not a priority to me right now, I saw the study plan for it and I am familiar with most of it, but I want to leave no loose ends... And be able to explain concepts more concisely.

For the second round of the interviewmania module, I myself spent time solving problems on [LeetCode](https://leetcode.com/) similar to the example on the instructions for the interview, saw a couple of examples of task interviews on YouTube ([this](https://youtu.be/1qw5ITr3k9E) and [this](https://youtu.be/V8DGdPkBBxg) ones). I also contacted an IT recruiter and a dev at Encora to ask them for advice for me as an interviewer but this kind of didn’t help me too much. I learned more than expected from this activity since I haven’t been in the interviewer role before (at least not in this kind of interview). Practicing from this point of view made me become aware of the struggles of the interviewer and how as an interviewee I can improve (by saying "I do not know", ask for clarification when a question is not clear, about restrictions and the advantages of using pseudocode before coding). But most important, by getting this practice and identifying weaknesses (to work on them of course) I feel like I can be more confident for future interviews.

Besides these activities, I kept learning about Selenium WebDriver with Python, about how to set up test cases. Next time I want to pair up what I  can do with SWD in Python but with Java.

I attended an agile workshop. This time it was about Design Thinking. It was very similar to one of the onboarding sessions. As a software engineer is important to think about people and their needs, they are the ones who need the product and will be the final users most of the time. Design Thinking emphasizes this approach and aims to provide solutions to address their challenges. By using design thinking principles, we can develop software that not only meets functional requirements but also delivers a positive user experience. Using design thinking, we can better understand and satisfy people's needs and improve the quality and success of software.

That’s it for this week!
